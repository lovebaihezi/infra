// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apps/apps-service/todo/todo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto;
namespace todo {
class AddResult;
struct AddResultDefaultTypeInternal;
extern AddResultDefaultTypeInternal _AddResult_default_instance_;
class DeleteQuery;
struct DeleteQueryDefaultTypeInternal;
extern DeleteQueryDefaultTypeInternal _DeleteQuery_default_instance_;
class DeleteResult;
struct DeleteResultDefaultTypeInternal;
extern DeleteResultDefaultTypeInternal _DeleteResult_default_instance_;
class QueryResult;
struct QueryResultDefaultTypeInternal;
extern QueryResultDefaultTypeInternal _QueryResult_default_instance_;
class Todo;
struct TodoDefaultTypeInternal;
extern TodoDefaultTypeInternal _Todo_default_instance_;
class TodoAdd;
struct TodoAddDefaultTypeInternal;
extern TodoAddDefaultTypeInternal _TodoAdd_default_instance_;
class TodoQuery;
struct TodoQueryDefaultTypeInternal;
extern TodoQueryDefaultTypeInternal _TodoQuery_default_instance_;
class TodoUpdate;
struct TodoUpdateDefaultTypeInternal;
extern TodoUpdateDefaultTypeInternal _TodoUpdate_default_instance_;
class UpdateResult;
struct UpdateResultDefaultTypeInternal;
extern UpdateResultDefaultTypeInternal _UpdateResult_default_instance_;
}  // namespace todo
PROTOBUF_NAMESPACE_OPEN
template<> ::todo::AddResult* Arena::CreateMaybeMessage<::todo::AddResult>(Arena*);
template<> ::todo::DeleteQuery* Arena::CreateMaybeMessage<::todo::DeleteQuery>(Arena*);
template<> ::todo::DeleteResult* Arena::CreateMaybeMessage<::todo::DeleteResult>(Arena*);
template<> ::todo::QueryResult* Arena::CreateMaybeMessage<::todo::QueryResult>(Arena*);
template<> ::todo::Todo* Arena::CreateMaybeMessage<::todo::Todo>(Arena*);
template<> ::todo::TodoAdd* Arena::CreateMaybeMessage<::todo::TodoAdd>(Arena*);
template<> ::todo::TodoQuery* Arena::CreateMaybeMessage<::todo::TodoQuery>(Arena*);
template<> ::todo::TodoUpdate* Arena::CreateMaybeMessage<::todo::TodoUpdate>(Arena*);
template<> ::todo::UpdateResult* Arena::CreateMaybeMessage<::todo::UpdateResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace todo {

// ===================================================================

class Todo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo.Todo) */ {
 public:
  inline Todo() : Todo(nullptr) {}
  ~Todo() override;
  explicit PROTOBUF_CONSTEXPR Todo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Todo(const Todo& from);
  Todo(Todo&& from) noexcept
    : Todo() {
    *this = ::std::move(from);
  }

  inline Todo& operator=(const Todo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Todo& operator=(Todo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Todo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Todo* internal_default_instance() {
    return reinterpret_cast<const Todo*>(
               &_Todo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Todo& a, Todo& b) {
    a.Swap(&b);
  }
  inline void Swap(Todo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Todo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Todo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Todo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Todo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Todo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Todo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo.Todo";
  }
  protected:
  explicit Todo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kContentFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kOverdueTimeFieldNumber = 4,
    kIsCompletedFieldNumber = 5,
    kIndexFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string startTime = 3;
  void clear_starttime();
  const std::string& starttime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_starttime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_starttime();
  PROTOBUF_NODISCARD std::string* release_starttime();
  void set_allocated_starttime(std::string* starttime);
  private:
  const std::string& _internal_starttime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starttime(const std::string& value);
  std::string* _internal_mutable_starttime();
  public:

  // optional string overdueTime = 4;
  bool has_overduetime() const;
  private:
  bool _internal_has_overduetime() const;
  public:
  void clear_overduetime();
  const std::string& overduetime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_overduetime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_overduetime();
  PROTOBUF_NODISCARD std::string* release_overduetime();
  void set_allocated_overduetime(std::string* overduetime);
  private:
  const std::string& _internal_overduetime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_overduetime(const std::string& value);
  std::string* _internal_mutable_overduetime();
  public:

  // bool isCompleted = 5;
  void clear_iscompleted();
  bool iscompleted() const;
  void set_iscompleted(bool value);
  private:
  bool _internal_iscompleted() const;
  void _internal_set_iscompleted(bool value);
  public:

  // int32 index = 6;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:todo.Todo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr overduetime_;
  bool iscompleted_;
  int32_t index_;
  friend struct ::TableStruct_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto;
};
// -------------------------------------------------------------------

class TodoUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo.TodoUpdate) */ {
 public:
  inline TodoUpdate() : TodoUpdate(nullptr) {}
  ~TodoUpdate() override;
  explicit PROTOBUF_CONSTEXPR TodoUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TodoUpdate(const TodoUpdate& from);
  TodoUpdate(TodoUpdate&& from) noexcept
    : TodoUpdate() {
    *this = ::std::move(from);
  }

  inline TodoUpdate& operator=(const TodoUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TodoUpdate& operator=(TodoUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TodoUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TodoUpdate* internal_default_instance() {
    return reinterpret_cast<const TodoUpdate*>(
               &_TodoUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TodoUpdate& a, TodoUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TodoUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TodoUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TodoUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TodoUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TodoUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TodoUpdate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TodoUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo.TodoUpdate";
  }
  protected:
  explicit TodoUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTodosFieldNumber = 1,
  };
  // repeated .todo.Todo todos = 1;
  int todos_size() const;
  private:
  int _internal_todos_size() const;
  public:
  void clear_todos();
  ::todo::Todo* mutable_todos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo >*
      mutable_todos();
  private:
  const ::todo::Todo& _internal_todos(int index) const;
  ::todo::Todo* _internal_add_todos();
  public:
  const ::todo::Todo& todos(int index) const;
  ::todo::Todo* add_todos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo >&
      todos() const;

  // @@protoc_insertion_point(class_scope:todo.TodoUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo > todos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto;
};
// -------------------------------------------------------------------

class UpdateResult final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:todo.UpdateResult) */ {
 public:
  inline UpdateResult() : UpdateResult(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UpdateResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateResult(const UpdateResult& from);
  UpdateResult(UpdateResult&& from) noexcept
    : UpdateResult() {
    *this = ::std::move(from);
  }

  inline UpdateResult& operator=(const UpdateResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResult& operator=(UpdateResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateResult* internal_default_instance() {
    return reinterpret_cast<const UpdateResult*>(
               &_UpdateResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateResult& a, UpdateResult& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateResult& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateResult& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo.UpdateResult";
  }
  protected:
  explicit UpdateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:todo.UpdateResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto;
};
// -------------------------------------------------------------------

class TodoQuery final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:todo.TodoQuery) */ {
 public:
  inline TodoQuery() : TodoQuery(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TodoQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TodoQuery(const TodoQuery& from);
  TodoQuery(TodoQuery&& from) noexcept
    : TodoQuery() {
    *this = ::std::move(from);
  }

  inline TodoQuery& operator=(const TodoQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline TodoQuery& operator=(TodoQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TodoQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const TodoQuery* internal_default_instance() {
    return reinterpret_cast<const TodoQuery*>(
               &_TodoQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TodoQuery& a, TodoQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(TodoQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TodoQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TodoQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TodoQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TodoQuery& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TodoQuery& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo.TodoQuery";
  }
  protected:
  explicit TodoQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:todo.TodoQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto;
};
// -------------------------------------------------------------------

class QueryResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo.QueryResult) */ {
 public:
  inline QueryResult() : QueryResult(nullptr) {}
  ~QueryResult() override;
  explicit PROTOBUF_CONSTEXPR QueryResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryResult(const QueryResult& from);
  QueryResult(QueryResult&& from) noexcept
    : QueryResult() {
    *this = ::std::move(from);
  }

  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResult& operator=(QueryResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryResult* internal_default_instance() {
    return reinterpret_cast<const QueryResult*>(
               &_QueryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryResult& a, QueryResult& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QueryResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo.QueryResult";
  }
  protected:
  explicit QueryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTodosFieldNumber = 1,
  };
  // repeated .todo.Todo todos = 1;
  int todos_size() const;
  private:
  int _internal_todos_size() const;
  public:
  void clear_todos();
  ::todo::Todo* mutable_todos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo >*
      mutable_todos();
  private:
  const ::todo::Todo& _internal_todos(int index) const;
  ::todo::Todo* _internal_add_todos();
  public:
  const ::todo::Todo& todos(int index) const;
  ::todo::Todo* add_todos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo >&
      todos() const;

  // @@protoc_insertion_point(class_scope:todo.QueryResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo > todos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto;
};
// -------------------------------------------------------------------

class TodoAdd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo.TodoAdd) */ {
 public:
  inline TodoAdd() : TodoAdd(nullptr) {}
  ~TodoAdd() override;
  explicit PROTOBUF_CONSTEXPR TodoAdd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TodoAdd(const TodoAdd& from);
  TodoAdd(TodoAdd&& from) noexcept
    : TodoAdd() {
    *this = ::std::move(from);
  }

  inline TodoAdd& operator=(const TodoAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline TodoAdd& operator=(TodoAdd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TodoAdd& default_instance() {
    return *internal_default_instance();
  }
  static inline const TodoAdd* internal_default_instance() {
    return reinterpret_cast<const TodoAdd*>(
               &_TodoAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TodoAdd& a, TodoAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(TodoAdd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TodoAdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TodoAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TodoAdd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TodoAdd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TodoAdd& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TodoAdd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo.TodoAdd";
  }
  protected:
  explicit TodoAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTodosFieldNumber = 1,
  };
  // repeated .todo.Todo todos = 1;
  int todos_size() const;
  private:
  int _internal_todos_size() const;
  public:
  void clear_todos();
  ::todo::Todo* mutable_todos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo >*
      mutable_todos();
  private:
  const ::todo::Todo& _internal_todos(int index) const;
  ::todo::Todo* _internal_add_todos();
  public:
  const ::todo::Todo& todos(int index) const;
  ::todo::Todo* add_todos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo >&
      todos() const;

  // @@protoc_insertion_point(class_scope:todo.TodoAdd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo > todos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto;
};
// -------------------------------------------------------------------

class AddResult final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:todo.AddResult) */ {
 public:
  inline AddResult() : AddResult(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddResult(const AddResult& from);
  AddResult(AddResult&& from) noexcept
    : AddResult() {
    *this = ::std::move(from);
  }

  inline AddResult& operator=(const AddResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddResult& operator=(AddResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddResult* internal_default_instance() {
    return reinterpret_cast<const AddResult*>(
               &_AddResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AddResult& a, AddResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AddResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddResult& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddResult& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo.AddResult";
  }
  protected:
  explicit AddResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:todo.AddResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto;
};
// -------------------------------------------------------------------

class DeleteQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:todo.DeleteQuery) */ {
 public:
  inline DeleteQuery() : DeleteQuery(nullptr) {}
  ~DeleteQuery() override;
  explicit PROTOBUF_CONSTEXPR DeleteQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteQuery(const DeleteQuery& from);
  DeleteQuery(DeleteQuery&& from) noexcept
    : DeleteQuery() {
    *this = ::std::move(from);
  }

  inline DeleteQuery& operator=(const DeleteQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteQuery& operator=(DeleteQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteQuery* internal_default_instance() {
    return reinterpret_cast<const DeleteQuery*>(
               &_DeleteQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteQuery& a, DeleteQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteQuery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo.DeleteQuery";
  }
  protected:
  explicit DeleteQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // @@protoc_insertion_point(class_scope:todo.DeleteQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto;
};
// -------------------------------------------------------------------

class DeleteResult final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:todo.DeleteResult) */ {
 public:
  inline DeleteResult() : DeleteResult(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeleteResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteResult(const DeleteResult& from);
  DeleteResult(DeleteResult&& from) noexcept
    : DeleteResult() {
    *this = ::std::move(from);
  }

  inline DeleteResult& operator=(const DeleteResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResult& operator=(DeleteResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteResult* internal_default_instance() {
    return reinterpret_cast<const DeleteResult*>(
               &_DeleteResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteResult& a, DeleteResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteResult& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteResult& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "todo.DeleteResult";
  }
  protected:
  explicit DeleteResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:todo.DeleteResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Todo

// string id = 1;
inline void Todo::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Todo::id() const {
  // @@protoc_insertion_point(field_get:todo.Todo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Todo::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo.Todo.id)
}
inline std::string* Todo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:todo.Todo.id)
  return _s;
}
inline const std::string& Todo::_internal_id() const {
  return id_.Get();
}
inline void Todo::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* Todo::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* Todo::release_id() {
  // @@protoc_insertion_point(field_release:todo.Todo.id)
  return id_.Release();
}
inline void Todo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo.Todo.id)
}

// string content = 2;
inline void Todo::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& Todo::content() const {
  // @@protoc_insertion_point(field_get:todo.Todo.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Todo::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo.Todo.content)
}
inline std::string* Todo::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:todo.Todo.content)
  return _s;
}
inline const std::string& Todo::_internal_content() const {
  return content_.Get();
}
inline void Todo::_internal_set_content(const std::string& value) {
  
  content_.Set(value, GetArenaForAllocation());
}
inline std::string* Todo::_internal_mutable_content() {
  
  return content_.Mutable(GetArenaForAllocation());
}
inline std::string* Todo::release_content() {
  // @@protoc_insertion_point(field_release:todo.Todo.content)
  return content_.Release();
}
inline void Todo::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault()) {
    content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo.Todo.content)
}

// string startTime = 3;
inline void Todo::clear_starttime() {
  starttime_.ClearToEmpty();
}
inline const std::string& Todo::starttime() const {
  // @@protoc_insertion_point(field_get:todo.Todo.startTime)
  return _internal_starttime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Todo::set_starttime(ArgT0&& arg0, ArgT... args) {
 
 starttime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo.Todo.startTime)
}
inline std::string* Todo::mutable_starttime() {
  std::string* _s = _internal_mutable_starttime();
  // @@protoc_insertion_point(field_mutable:todo.Todo.startTime)
  return _s;
}
inline const std::string& Todo::_internal_starttime() const {
  return starttime_.Get();
}
inline void Todo::_internal_set_starttime(const std::string& value) {
  
  starttime_.Set(value, GetArenaForAllocation());
}
inline std::string* Todo::_internal_mutable_starttime() {
  
  return starttime_.Mutable(GetArenaForAllocation());
}
inline std::string* Todo::release_starttime() {
  // @@protoc_insertion_point(field_release:todo.Todo.startTime)
  return starttime_.Release();
}
inline void Todo::set_allocated_starttime(std::string* starttime) {
  if (starttime != nullptr) {
    
  } else {
    
  }
  starttime_.SetAllocated(starttime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (starttime_.IsDefault()) {
    starttime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo.Todo.startTime)
}

// optional string overdueTime = 4;
inline bool Todo::_internal_has_overduetime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Todo::has_overduetime() const {
  return _internal_has_overduetime();
}
inline void Todo::clear_overduetime() {
  overduetime_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Todo::overduetime() const {
  // @@protoc_insertion_point(field_get:todo.Todo.overdueTime)
  return _internal_overduetime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Todo::set_overduetime(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 overduetime_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:todo.Todo.overdueTime)
}
inline std::string* Todo::mutable_overduetime() {
  std::string* _s = _internal_mutable_overduetime();
  // @@protoc_insertion_point(field_mutable:todo.Todo.overdueTime)
  return _s;
}
inline const std::string& Todo::_internal_overduetime() const {
  return overduetime_.Get();
}
inline void Todo::_internal_set_overduetime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  overduetime_.Set(value, GetArenaForAllocation());
}
inline std::string* Todo::_internal_mutable_overduetime() {
  _has_bits_[0] |= 0x00000001u;
  return overduetime_.Mutable(GetArenaForAllocation());
}
inline std::string* Todo::release_overduetime() {
  // @@protoc_insertion_point(field_release:todo.Todo.overdueTime)
  if (!_internal_has_overduetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = overduetime_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (overduetime_.IsDefault()) {
    overduetime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Todo::set_allocated_overduetime(std::string* overduetime) {
  if (overduetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  overduetime_.SetAllocated(overduetime, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (overduetime_.IsDefault()) {
    overduetime_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:todo.Todo.overdueTime)
}

// bool isCompleted = 5;
inline void Todo::clear_iscompleted() {
  iscompleted_ = false;
}
inline bool Todo::_internal_iscompleted() const {
  return iscompleted_;
}
inline bool Todo::iscompleted() const {
  // @@protoc_insertion_point(field_get:todo.Todo.isCompleted)
  return _internal_iscompleted();
}
inline void Todo::_internal_set_iscompleted(bool value) {
  
  iscompleted_ = value;
}
inline void Todo::set_iscompleted(bool value) {
  _internal_set_iscompleted(value);
  // @@protoc_insertion_point(field_set:todo.Todo.isCompleted)
}

// int32 index = 6;
inline void Todo::clear_index() {
  index_ = 0;
}
inline int32_t Todo::_internal_index() const {
  return index_;
}
inline int32_t Todo::index() const {
  // @@protoc_insertion_point(field_get:todo.Todo.index)
  return _internal_index();
}
inline void Todo::_internal_set_index(int32_t value) {
  
  index_ = value;
}
inline void Todo::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:todo.Todo.index)
}

// -------------------------------------------------------------------

// TodoUpdate

// repeated .todo.Todo todos = 1;
inline int TodoUpdate::_internal_todos_size() const {
  return todos_.size();
}
inline int TodoUpdate::todos_size() const {
  return _internal_todos_size();
}
inline void TodoUpdate::clear_todos() {
  todos_.Clear();
}
inline ::todo::Todo* TodoUpdate::mutable_todos(int index) {
  // @@protoc_insertion_point(field_mutable:todo.TodoUpdate.todos)
  return todos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo >*
TodoUpdate::mutable_todos() {
  // @@protoc_insertion_point(field_mutable_list:todo.TodoUpdate.todos)
  return &todos_;
}
inline const ::todo::Todo& TodoUpdate::_internal_todos(int index) const {
  return todos_.Get(index);
}
inline const ::todo::Todo& TodoUpdate::todos(int index) const {
  // @@protoc_insertion_point(field_get:todo.TodoUpdate.todos)
  return _internal_todos(index);
}
inline ::todo::Todo* TodoUpdate::_internal_add_todos() {
  return todos_.Add();
}
inline ::todo::Todo* TodoUpdate::add_todos() {
  ::todo::Todo* _add = _internal_add_todos();
  // @@protoc_insertion_point(field_add:todo.TodoUpdate.todos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo >&
TodoUpdate::todos() const {
  // @@protoc_insertion_point(field_list:todo.TodoUpdate.todos)
  return todos_;
}

// -------------------------------------------------------------------

// UpdateResult

// -------------------------------------------------------------------

// TodoQuery

// -------------------------------------------------------------------

// QueryResult

// repeated .todo.Todo todos = 1;
inline int QueryResult::_internal_todos_size() const {
  return todos_.size();
}
inline int QueryResult::todos_size() const {
  return _internal_todos_size();
}
inline void QueryResult::clear_todos() {
  todos_.Clear();
}
inline ::todo::Todo* QueryResult::mutable_todos(int index) {
  // @@protoc_insertion_point(field_mutable:todo.QueryResult.todos)
  return todos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo >*
QueryResult::mutable_todos() {
  // @@protoc_insertion_point(field_mutable_list:todo.QueryResult.todos)
  return &todos_;
}
inline const ::todo::Todo& QueryResult::_internal_todos(int index) const {
  return todos_.Get(index);
}
inline const ::todo::Todo& QueryResult::todos(int index) const {
  // @@protoc_insertion_point(field_get:todo.QueryResult.todos)
  return _internal_todos(index);
}
inline ::todo::Todo* QueryResult::_internal_add_todos() {
  return todos_.Add();
}
inline ::todo::Todo* QueryResult::add_todos() {
  ::todo::Todo* _add = _internal_add_todos();
  // @@protoc_insertion_point(field_add:todo.QueryResult.todos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo >&
QueryResult::todos() const {
  // @@protoc_insertion_point(field_list:todo.QueryResult.todos)
  return todos_;
}

// -------------------------------------------------------------------

// TodoAdd

// repeated .todo.Todo todos = 1;
inline int TodoAdd::_internal_todos_size() const {
  return todos_.size();
}
inline int TodoAdd::todos_size() const {
  return _internal_todos_size();
}
inline void TodoAdd::clear_todos() {
  todos_.Clear();
}
inline ::todo::Todo* TodoAdd::mutable_todos(int index) {
  // @@protoc_insertion_point(field_mutable:todo.TodoAdd.todos)
  return todos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo >*
TodoAdd::mutable_todos() {
  // @@protoc_insertion_point(field_mutable_list:todo.TodoAdd.todos)
  return &todos_;
}
inline const ::todo::Todo& TodoAdd::_internal_todos(int index) const {
  return todos_.Get(index);
}
inline const ::todo::Todo& TodoAdd::todos(int index) const {
  // @@protoc_insertion_point(field_get:todo.TodoAdd.todos)
  return _internal_todos(index);
}
inline ::todo::Todo* TodoAdd::_internal_add_todos() {
  return todos_.Add();
}
inline ::todo::Todo* TodoAdd::add_todos() {
  ::todo::Todo* _add = _internal_add_todos();
  // @@protoc_insertion_point(field_add:todo.TodoAdd.todos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::todo::Todo >&
TodoAdd::todos() const {
  // @@protoc_insertion_point(field_list:todo.TodoAdd.todos)
  return todos_;
}

// -------------------------------------------------------------------

// AddResult

// -------------------------------------------------------------------

// DeleteQuery

// repeated string ids = 1;
inline int DeleteQuery::_internal_ids_size() const {
  return ids_.size();
}
inline int DeleteQuery::ids_size() const {
  return _internal_ids_size();
}
inline void DeleteQuery::clear_ids() {
  ids_.Clear();
}
inline std::string* DeleteQuery::add_ids() {
  std::string* _s = _internal_add_ids();
  // @@protoc_insertion_point(field_add_mutable:todo.DeleteQuery.ids)
  return _s;
}
inline const std::string& DeleteQuery::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& DeleteQuery::ids(int index) const {
  // @@protoc_insertion_point(field_get:todo.DeleteQuery.ids)
  return _internal_ids(index);
}
inline std::string* DeleteQuery::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:todo.DeleteQuery.ids)
  return ids_.Mutable(index);
}
inline void DeleteQuery::set_ids(int index, const std::string& value) {
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:todo.DeleteQuery.ids)
}
inline void DeleteQuery::set_ids(int index, std::string&& value) {
  ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:todo.DeleteQuery.ids)
}
inline void DeleteQuery::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:todo.DeleteQuery.ids)
}
inline void DeleteQuery::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:todo.DeleteQuery.ids)
}
inline std::string* DeleteQuery::_internal_add_ids() {
  return ids_.Add();
}
inline void DeleteQuery::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:todo.DeleteQuery.ids)
}
inline void DeleteQuery::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:todo.DeleteQuery.ids)
}
inline void DeleteQuery::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:todo.DeleteQuery.ids)
}
inline void DeleteQuery::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:todo.DeleteQuery.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteQuery::ids() const {
  // @@protoc_insertion_point(field_list:todo.DeleteQuery.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteQuery::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:todo.DeleteQuery.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// DeleteResult

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace todo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_apps_2fapps_2dservice_2ftodo_2ftodo_2eproto
